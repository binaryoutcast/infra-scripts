#!/bin/bash

. /etc/init.d/functions

VERSION="$(basename $0) ver. 1.1-binoc"
USAGE="Usage: $(basename $0) < option > | --status-all | \
[ service_name [ command | --full-restart ] ]"
SERVICEDIR="/etc/init.d"
ACTIONDIR="/usr/libexec/initscripts/legacy-actions"
SERVICE=
ACTION=
OPTIONS=

if [ $# -eq 0 ]; then
   echo "${USAGE}" >&2
   exit 1
fi

cd /
while [ $# -gt 0 ]; do
  case "${1}" in
    --help | -h | --h* )
       echo "${USAGE}" >&2
       exit 0
       ;;
    --version | -V )
       echo "${VERSION}" >&2
       exit 0
       ;;
    --ignore-dependencies)
       export SYSTEMCTL_IGNORE_DEPENDENCIES=1
       shift
       ;;
    --skip-redirect)
       export SYSTEMCTL_SKIP_REDIRECT=1
       shift
       ;;
    *)
       if [ -z "${SERVICE}" -a $# -eq 1 -a "${1}" = "--status-all" ]; then
          cd ${SERVICEDIR}
          for SERVICE in * ; do
            case "${SERVICE}" in
              functions | halt | killall | single| linuxconf| kudzu)
                  ;;
              *)
                if ! is_ignored_file "${SERVICE}" \
		    && [ -x "${SERVICEDIR}/${SERVICE}" ]; then
                  env -i PATH="$PATH" TERM="$TERM" "${SERVICEDIR}/${SERVICE}" status
                fi
                ;;
            esac
          done
          exit 0
       elif [ $# -eq 2 -a "${2}" = "--full-restart" ]; then
          SERVICE="${1}"
          if [ -x "${SERVICEDIR}/${SERVICE}" ]; then
            env -i PATH="$PATH" TERM="$TERM" "${SERVICEDIR}/${SERVICE}" stop
            env -i PATH="$PATH" TERM="$TERM" "${SERVICEDIR}/${SERVICE}" start
            exit $?
          fi
       elif [ -z "${SERVICE}" ]; then
         SERVICE="${1}"
       elif [ -z "${ACTION}" ]; then
         ACTION="${1}"
       else
         OPTIONS="${OPTIONS} ${1}"
       fi
       shift
       ;;
   esac
done

if [ -f "${SERVICEDIR}/${SERVICE}" ]; then
   # LSB daemons that dies abnormally in systemd looks alive in systemd's eyes due to RemainAfterExit=yes
   # lets reap them before next start
   if [ "${ACTION}" = "start" ] && \
   systemctl show -p ActiveState "${SERVICE}".service | grep -q '=active$' && \
   systemctl show -p SubState "${SERVICE}".service | grep -q '=exited$' ; then
       /bin/systemctl stop "${SERVICE}".service
   fi
   # Workaround to be able to "stop" network.service when it's in inactive state using service instead of systemctl
   # Useful for manual testing of network
   if [ "${SERVICE}" = 'network' ] && [ "${ACTION}" = 'stop' ] && \
   [ "$(systemctl show -p ActiveState network.service --value)" = 'inactive' ] && \
   [ "$(systemctl show -p SourcePath network.service --value)" = '/etc/rc.d/init.d/network' ]; then
       export SYSTEMCTL_SKIP_REDIRECT=1
   fi
   env -i PATH="$PATH" TERM="$TERM" SYSTEMCTL_IGNORE_DEPENDENCIES="${SYSTEMCTL_IGNORE_DEPENDENCIES}" SYSTEMCTL_SKIP_REDIRECT="${SYSTEMCTL_SKIP_REDIRECT}" "${SERVICEDIR}/${SERVICE}" "${ACTION}" ${OPTIONS}
elif [ -n "${ACTION}" ] && [ -x "${ACTIONDIR}/${SERVICE}/${ACTION}" ]; then
   env -i PATH="$PATH" TERM="$TERM" SYSTEMCTL_IGNORE_DEPENDENCIES="${SYSTEMCTL_IGNORE_DEPENDENCIES}" SYSTEMCTL_SKIP_REDIRECT="${SYSTEMCTL_SKIP_REDIRECT}" "${ACTIONDIR}/${SERVICE}/${ACTION}" ${OPTIONS}
elif `echo $ACTION | grep -Eqw "start|stop|restart|try-restart|reload|force-reload|status|condrestart"` ; then
  SERVICE_MANGLED=$(/usr/bin/systemd-escape --mangle "${SERVICE}")

  if [ "${ACTION}" == "status" ]; then
    exec /bin/systemctl "${ACTION}" "${SERVICE_MANGLED}"
    exit 0
  fi

  /bin/systemctl "${ACTION}" "${SERVICE_MANGLED}" ${OPTIONS} 2> /dev/null
   
  SYSTEMCTL_EXITCODE=${?}

  SERVICE_STATUSCODE=(
    "[  \e[32mOK\e[0m  ]"
    "[\e[31mFAILED\e[0m]"
  )
  
  SERVICE_OKMESSAGE=(
    "Started"
    "Stopped"
    "Restarted"
    "Try Restarted"
    "Reloaded"
    "Force Reloaded"
    "Conditionally Restarted"
  )
  
  SERVICE_FAILEDMESSAGE=(
    "Failed to ${ACTION} ${SERVICE}"
    "${SERVICE}: unrecognized service"
  )

  if [ ${SYSTEMCTL_EXITCODE} -eq 0 ]; then
      if [ "${ACTION}" == "start" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[0]} ${SERVICE}"
      elif [ "${ACTION}" == "stop" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[1]} ${SERVICE}"
      elif [ "${ACTION}" == "restart" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[2]} ${SERVICE}"
      elif [ "${ACTION}" == "try-restart" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[3]} ${SERVICE}"
      elif [ "${ACTION}" == "reload" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[4]} ${SERVICE}"
      elif [ "${ACTION}" == "force-reload" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[5]} ${SERVICE}"
      elif [ "${ACTION}" == "condrestart" ]; then
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE_OKMESSAGE[6]} ${SERVICE}"
      else
        echo -e "${SERVICE_STATUSCODE[0]} ${SERVICE}"
      fi
  elif [ ${SYSTEMCTL_EXITCODE} -eq 4 ] || [ ${SYSTEMCTL_EXITCODE} -eq 5 ]; then
    echo -e "${SERVICE_FAILEDMESSAGE[1]}"
  else
    if [ ${ACTION} != "status" ]; then
      echo -e "${SERVICE_STATUSCODE[1]} ${SERVICE_FAILEDMESSAGE[0]}"
    fi
  fi
  
  exit ${SYSTEMCTL_EXITCODE}
else
   echo $"The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl." >&2
   exit 2
fi
